{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin(...sources) {\n  let resultSelector;\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0];\n  }\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map(args => resultSelector(...args)));\n  }\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\nclass ForkJoinSubscriber extends OuterSubscriber {\n  constructor(destination, sources) {\n    super(destination);\n    this.sources = sources;\n    this.completed = 0;\n    this.haveValues = 0;\n    const len = sources.length;\n    this.values = new Array(len);\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values[outerIndex] = innerValue;\n    if (!innerSub._hasValue) {\n      innerSub._hasValue = true;\n      this.haveValues++;\n    }\n  }\n  notifyComplete(innerSub) {\n    const {\n      destination,\n      haveValues,\n      values\n    } = this;\n    const len = values.length;\n    if (!innerSub._hasValue) {\n      destination.complete();\n      return;\n    }\n    this.completed++;\n    if (this.completed !== len) {\n      return;\n    }\n    if (haveValues === len) {\n      destination.next(values);\n    }\n    destination.complete();\n  }\n}\n//# sourceMappingURL=forkJoin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}