{"ast":null,"code":"import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n  constructor(unsubscribe) {\n    this.closed = false;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  unsubscribe() {\n    let hasErrors = false;\n    let errors;\n    if (this.closed) {\n      return;\n    }\n    let {\n      _parent,\n      _parents,\n      _unsubscribe,\n      _subscriptions\n    } = this;\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n    while (_parent) {\n      _parent.remove(this);\n      _parent = ++index < len && _parents[index] || null;\n    }\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n      }\n    }\n    if (isArray(_subscriptions)) {\n      index = -1;\n      len = _subscriptions.length;\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n  add(teardown) {\n    if (!teardown || teardown === Subscription.EMPTY) {\n      return Subscription.EMPTY;\n    }\n    if (teardown === this) {\n      return this;\n    }\n    let subscription = teardown;\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function') {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n    return subscription;\n  }\n  remove(subscription) {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n  _addParent(parent) {\n    let {\n      _parent,\n      _parents\n    } = this;\n    if (!_parent || _parent === parent) {\n      this._parent = parent;\n    } else if (!_parents) {\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      _parents.push(parent);\n    }\n  }\n}\nSubscription.EMPTY = function (empty) {\n  empty.closed = true;\n  return empty;\n}(new Subscription());\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce((errs, err) => errs.concat(err instanceof UnsubscriptionError ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}