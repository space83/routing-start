{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate) {\n  return source => source.lift(new TakeWhileOperator(predicate));\n}\nclass TakeWhileOperator {\n  constructor(predicate) {\n    this.predicate = predicate;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\nclass TakeWhileSubscriber extends Subscriber {\n  constructor(destination, predicate) {\n    super(destination);\n    this.predicate = predicate;\n    this.index = 0;\n  }\n  _next(value) {\n    const destination = this.destination;\n    let result;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n  nextOrComplete(value, predicateResult) {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n//# sourceMappingURL=takeWhile.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}