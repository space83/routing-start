{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n  return source => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n  let subject;\n  let refCount = 0;\n  let subscription;\n  let hasError = false;\n  let isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        }\n      });\n    }\n    const innerSub = subject.subscribe(this);\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n}\n//# sourceMappingURL=shareReplay.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}